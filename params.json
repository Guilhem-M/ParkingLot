{"name":"Parking lot Supervision by Video Surveillance","tagline":"","body":"# 1 Goal\r\nThe goal of this project is to design and develop a system which can supervise a parking lot by video surveillance.  Basically, with an input video the system should be able to detect for each parking space if a car is parked or not.\r\n# 2 Why it is important\r\nSeveral times a day we have to park our car in a parking lot: to go to work, shopping, restaurant… In urban areas, the number of cars can exceed the number of parking space. That can lead to a waste of time for the driver and troubles for the other car in the road in the case of a double park. On the other hand, people are always trying to find the best parking space (the one which is the closest to the final destination), that is why people are circling around and waste gas and time.\r\nAn underground parking lot is easy to supervise; the only thing to do is to count the vehicle entrance and exit using barrier gates and tickets. But in the case of a free open-air parking lot with different entrances and exits, the video surveillance system is a cheap easy to install solution. \r\n\r\n# 3 Approach\r\n\r\n## 3.1 General idea\r\nThe general idea is to separate the background and the foreground of the video. The foreground is a map of the part that has changed between the current frame and the previous frames. The foreground represents all the movements in the image.\r\nIf we detect movements on parking space, the state (vacant or not) of the space may have changed.\r\n## 3.2 Volume estimation and probabilistic representation of a parking space\r\nThe current system need as an input the 2D coordinates of each parking space relative to the image. But a better representation of a parking space is a volume. Indeed a car parked on a space occupied a certain volume, and because we cannot have a camera looking perfectly perpendicular to the parking lot, we have to deal with perspective effects and possible inter-occlusion between cars. \r\nI decided to implement the idea found in [1]:\r\nThe first step is to estimate the 3D volume of a car parked on a parking space. Knowing the 2D coordinates of the parking space, a good approximation of the height of car parked on the parking space is to take half of the average of the four sides. Then we can construct a 2D parallelepiped which represents the volume of the parking space.\r\nThe next step is to give a different weight for each pixel inside the parallelepiped. Indeed we know that if a car is parked on a parking spot, the car is most likely lying around the center of the space. That is why, a 2D Gaussian function, centered on the center of the volume, is used to set the weight of each pixel inside the volume. \r\nThe next step is to give a lower weight to the pixel belonging to several parking spaces. Indeed, due to the perspective, two parking spaces volume can overlap each other. \r\n## 3.3 Background subtraction\r\nThis step takes care of detecting the objects which are moving in the video: we consider as the foreground the objects which are moving, and as the foreground everything that stays stationary.\r\nA naïve approach could be to simply to take the absolute difference between the current frame and the previous frame. However due to the noise of the camera, the evolution of the lighting condition, the small displacement (wind blowing leaves), the result is not accurate.\r\nThe technique of mixture of Gaussians [2] solves these problems by establishing a model of the background. Each pixel’s intensity is modeled as a mixture of three to five Gaussian functions. The parameters and weight of each Gaussian is updated from frame to frame by an expectation maximization algorithm and the foreground is determined by thresholding. \r\n## 3.4 Tracking and parking space state updating \r\nNow that the moving objects are extracted, we can track them and see if their trajectories start or end in a parking spot. The idea is to track the different moving objects, and if the trajectory is long enough, look at the starting point and try to find if it lies on one or several parking volume. In the case of several possible parking spaces (due to 3D volume overlapping), the one which returns the highest probability (see section 3.2) is chosen.  Then we can assume that a car (or other object) has left the space and we can update the state to vacant. \r\nWe apply the same to the end of the trajectory, but in the case that it ends in a parking spot we update the state to occupied.\r\n# 4 Results and Demo\r\nThe system gives good results when the car is not too far from the camera and when there is not too much noise in the foreground. \r\n# 5 Future work\r\nCurrently the system works only if one car is moving at a time in the parking lot. The next step is to handle multiple car tracking (blob detection in the foreground and Kalman filter to track every moving object).\r\nThen I have to measure the accuracy of the system and to identify in which scenario/conditions the system failed. \r\n# 6 References\r\n[1] DELIBALTOV, Diana, WU, Wencheng, LOCE, Robert P., et al. Parking lot occupancy determination from lamp-post camera images. In : Intelligent Transportation Systems-(ITSC), 2013 16th International IEEE Conference on. IEEE, 2013. p. 2387-2392.\r\n\r\n[2] KAEWTRAKULPONG, Pakorn et BOWDEN, Richard. An improved adaptive background mixture model for real-time tracking with shadow detection. In : Video-based surveillance systems. Springer US, 2002. p. 135-144.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}